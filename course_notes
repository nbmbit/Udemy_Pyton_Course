str() строка
int() целое число
round() округление флоат чисел
len() длинна строки
type() тип строки
open() открыть файл
	with open('file', mode='r,w,a,r+,w+') as <var>:
		<var2> = <var>.read()
	print(var2)
ord() отображает юникод номер символа
chr() отображает символ по юникод номеру


.count() вывести количество указанных символов в строке
.capitalize() перевод первого символа в верхний регистр
.upper() перевод всей строки в верхний регистр
.lower() перевод всей строки в нижний регистр
.isupper/islower() проверка регистра всей строки
.isalnum() строка состоит только из цифр и букв
.isalpha() строка состоит только из букв
.isspace() проверка содержит ли строка только пробелы
.strip() удаляет пробелы в начале и конце строки
	print(<var>.strip() == "") способ проверки пустая ли строка
.startswith()/.endswith() проверка с какого символа начинается/заканчивается строка
.split() разделение строки по сепаратору удаляя его
	data = "12;10;11;18"
	split_data = data.split(";")
	print(split_data)
	['12', '10', '11', '18']
.partition() разделение строки по сепаратору не удаляя его
.read() читать файл (возвращает str)
.write() записать в файл (mode=w перезаписать файл, mode=a дописать в конец файла)
.readlines() чтение файла построчно (возвращает list)
.seek(0) перевод строки на начало файла после .read()
.close() закрыть файл после read()
.closed проверка закрыт ли файл

функции list
<var> = ['<string>' or value]
list()
.append() добавление элемента в конец листа
.pop() удаление элемента из листа (пустое удаляет последний в списке)
.sort() сортировка списка
.sort(key=len) сортировка по количеству символов в элементе
.sort(reverse=True) сортировка по убыванию
.reverse() список в обратном порядке(не сортировка по убыванию)
.insert() вставка элемента после указанного индекса (1, 22)
.index() выводит элемент по заданому индексу
.count() вывести количество указанных символов в листе
.copy() создает копию листа
.clear() очистка списка

функции dict
<var> = {'key' : value}
<var> = dict(key=value)
<var>['key'] доступ к значению по ключу
<var>.get('key') доступ к значению по ключу через функцию get()
<var>['key'] = value добавление элемента в словарь, изменение значение к существующему ключу
del <var>['key'] удаление элемента из словаря
<var>.keys() выводит список ключей
<var>.values() выводит список значений
list(<var>.keys/values()) выводит список ключей/значений в виде list
sorted(<var>.keys/values()) выводит отсортированный list ключей/значений 
.copy() создает копию словаря
<var>.pop('key') удаляет указанны ключ из словаря и выводит его значение
<var>.popitem() удаляет последний элемент словаря и выводит его значение
<var>.setdefault('key') добавляет элемент в конец словаря и присваивает значение None
from collections import OrderedDict импортирует OrderedDict
<var> = OrderedDict(key=value) сортирует элементы внутри словаря для сравнения, обычный словарь сравнивает только ключ/значение, но не их порядок

Кортежи или tuple
<var> = ('value')
<var>[index] доступ к элементу по индексу
<var> = [('value'), ('value')] list из таплов

namedtuple именованный тапл
from collections import namedtuple импорт namedtuple
Пример определения namedtuple
Player = namedtuple('Player', 'name year rating') 
players = [Player('Carlsen', 1990, 22), Player('Caruana', 1992, 22), Player('Mamedyarov', 1985, 22)]
p1 = Player('Carlsen', 1990, 22)
print(p1.name)
print(p1.year)
print(p1.rating)

if not <var> - (if not True) if x is false, then True, else False/
	x = ""
	#if not true
	if not x:
		print("empty")
	else:
		print("not empty")
	empty

\n новая строка
\t табуляция

r"" если необходимо выводить текст без экранирования

<variable>[int] обращению к строчному элементу по его индексу (начало строки с 0, с конца строки с -1)
<variable>[int:int:int] выводить строку с указанного символа (подстрока)/до указанного/через указанное количество символов

print("My name is {}".format("Sasha")) - {} плейсхолдер, способ подстановки через плейсхолдер.
print("My name is {} and I'm {}".format("Sasha", 30)) - {} плейсхолдер, способ подстановки через плейсхолдер.
f"{} {}" форматирование позволяющее не вызывать .format() и использовать имя переменной напрямую в плейсхолдере


Конкатенация
print(first + " " + second)
print("%s %s" % (first, second))
print("{} {}".format(first, second))

var="a"
var*7
'aaaaaaa'
